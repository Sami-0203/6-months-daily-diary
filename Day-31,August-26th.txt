Day-31,August-26th

Asynchronous behavior of JavaScript  

Asynchronous Behavior in JavaScript
JavaScript is single-threaded, meaning it executes one task at a time in a synchronous manner. However, many real-world tasks (e.g., fetching data from a server, reading files) take time to complete. To avoid blocking the execution of other tasks during such operations, JavaScript incorporates asynchronous behavior. By default our JavaScript a synchronous in nature but due to its drawback i.e:blocking behavior we forcefully make the JavaScript asynchronous in nature so that it will show the non-blocking behavior.

Key Concepts of Asynchronous JavaScript

Synchronous vs. Asynchronous
Synchronous: Code executes line by line. Each operation must finish before the next starts.
Asynchronous: Certain operations can start and execute independently, allowing the program to continue running other code while waiting for the operation to complete.

Call Stack and Event Loop
JavaScript uses a call stack to manage function calls.
When an asynchronous task (e.g., a setTimeout, API call) is initiated, it gets offloaded to the Web APIs. Once completed, a callback is queued into the event loop to be executed.

Event Loop in Detail
The event loop is what enables JavaScript to handle asynchronous operations.

1.Call Stack:
Contains functions that are being executed. To provide memory or used for memory allocation.

2.Web APIs:
Offloads asynchronous tasks like timers, fetch requests, etc.

3.Task Queue:
Stores callback functions waiting to be executed after the asynchronous task is completed. When we have multiple task to perform we align them in a queue known as task queue.

4.Event Loop:
Continuously checks if the call stack is empty and pushes queue task from task queue to call stack. Single threaded, non- blocking and asynchronous behavior.



